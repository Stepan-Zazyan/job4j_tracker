jps

18533 StartUI
18601 Jps
7660 Main
18525 Launcher
17631 RemoteMavenServer36


jmap -histo 18533

Вывод предоставляет информацию о памяти, занимаемой различными классами в указанном процессе.
Ниже приведены первые 10 классов, перечисленных в выводе, вместе с количеством экземпляров и размером в байтах:

[B (byte array) - 267,251 экземпляр, 9,669,768 байт.
[J (long array) - 20,659 экземпляров, 1,986,120 байт.
java.nio.HeapByteBuffer - 30,942 экземпляра, 1,732,752 байта.
[I (int array) - 17,678 экземпляров, 1,514,376 байт.
com.sun.crypto.provider.GCTR - 20,622 экземпляра, 1,154,832 байта.
java.lang.String - 31,391 экземпляр, 753,384 байта.
sun.util.calendar.Gregorian$Date - 5,158 экземпляров, 495,168 байт.
[Ljava.lang.Object; (array of objects) - 8,396 экземпляров, 450,176 байт.
sun.security.ssl.Plaintext - 10,312 экземпляров, 412,480 байт.
java.lang.Class - 3,260 экземпляров, 397,096 байт.
Эти данные указывают на количество экземпляров каждого класса и размер памяти, занимаемый каждым классом в процессе. Это может помочь анализировать использование памяти и выявлять потенциальные проблемы с утечкой памяти или неэффективным использованием ресурсов в приложении.

jstat -gc 21092 10s 7

    S0C         S1C         S0U         S1U          EC           EU           OC           OU          MC         MU       CCSC      CCSU     YGC     YGCT     FGC    FGCT     CGC    CGCT       GCT
        0,0      1024,0         0,0      1007,2      30720,0      17408,0      93184,0       4567,0    10752,0    10566,7    1088,0    1024,9      2     0,023     0     0,000     0     0,000     0,023
        0,0      1024,0         0,0      1007,2      30720,0      22528,0      93184,0       4567,0    10752,0    10566,7    1088,0    1024,9      2     0,023     0     0,000     0     0,000     0,023
        0,0      1024,0         0,0      1007,2      30720,0      27648,0      93184,0       4567,0    10752,0    10566,7    1088,0    1024,9      2     0,023     0     0,000     0     0,000     0,023
        0,0      2048,0         0,0      1129,0      75776,0       5120,0      47104,0       4567,0    10752,0    10571,9    1088,0    1024,9      3     0,027     0     0,000     0     0,000     0,027
        0,0      2048,0         0,0      1129,0      75776,0      10240,0      47104,0       4567,0    10752,0    10571,9    1088,0    1024,9      3     0,027     0     0,000     0     0,000     0,027
        0,0      2048,0         0,0      1129,0      75776,0      15360,0      47104,0       4567,0    10752,0    10571,9    1088,0    1024,9      3     0,027     0     0,000     0     0,000     0,027
        0,0      2048,0         0,0      1129,0      75776,0      20480,0      47104,0       4567,0    10752,0    10571,9    1088,0    1024,9      3     0,027     0     0,000     0     0,000     0,027

Данный вывод предоставляет информацию о сборке мусора (garbage collection) в процессе Java с заданным идентификатором процесса (21092) в течение 7 интервалов длительностью 10 секунд.

S0C: Размер Survivor 0 (пометка) в ёмкости (capacity).
S1C: Размер Survivor 1 (пометка) в ёмкости (capacity).
S0U: Использованная ёмкость Survivor 0 (пометка).
S1U: Использованная ёмкость Survivor 1 (пометка).
EC: Размер ёмкости Eden Space.
EU: Использованная ёмкость Eden Space.
OC: Размер ёмкости Old Space (старого поколения).
OU: Использованная ёмкость Old Space.
MC: Размер ёмкости Metaspace (переменная область).
MU: Использованная ёмкость Metaspace.
CCSC: Размер ёмкости Compressed Class Space (сжатая область классов).
CCSU: Использованная ёмкость Compressed Class Space.
YGC: Количество сборок мусора Young Generation.
YGCT: Общее время выполнения сборок мусора Young Generation.
FGC: Количество сборок мусора Old Generation.
FGCT: Общее время выполнения сборок мусора Old Generation.
CGC: Количество сборок мусора Compressed Class Space.
CGCT: Общее время выполнения сборок мусора Compressed Class Space.
GCT: Общее время выполнения всех сборок мусора.
В данном случае также можно видеть значения каждого столбца для каждого интервала времени. Значения S1C, S1U, EU, OU и CCSU остаются постоянными во всех интервалах, что может указывать на стабильное использование памяти в соответствующих областях.
Значения OC (размер Old Space) и MC (размер Metaspace) имеют постоянное значение, а значения OU (использованная ёмкость Old Space) и MU (использованная ёмкость Metaspace) изменяются между интервалами. Это может указывать на выполнение сборки мусора в Old Generation и Metaspace для освобождения неиспользуемых объектов.
В целом, данный вывод позволяет оценить использование памяти и процесс сборки мусора в процессе Java в течение указанного периода времени.

Также был проведен анализ утилитой jconsole
Heap Memory Usage 72мб использовано на момент взятия среза 16 нитей 3615 классов  и 0,4% использования ЦП
